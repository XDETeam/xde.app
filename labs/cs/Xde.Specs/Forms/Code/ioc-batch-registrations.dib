#!markdown

# Batch registrations in IoC

	TODO: To develop IoC-related code it would be nice to define IoC requirements/cases.

One of the frequently used strategies is to scan existing types filtered by some predicate and register them in the IoC container. Doing this multiple times in run-time (scanning all existing types, applying predicate, etc) can be costly.

    PROBLEM: For each registration pattern we have to scan all types

For example we have some abstraction (IHostedService) and want to register all implementations (MessageQueueConsumer, MailService). Some of such implementations can be situated in reference packages.

#!csharp

using System.Collections.Generic;

// This is some basic contract we will play around
public interface IHostedService {  }

// Some classes both implementing or not the main contract
public class MessageQueueConsumer : IHostedService { }
public class MailService : IHostedService { }
public class Program { }

// Prepare list of all exported types
public static Type[] AllTypes = typeof(Program).Assembly.GetExportedTypes();

// Straightforward solution when we simply scan all exported types and filter by assignable from the contract
var services = AllTypes
    .Where(type => !type.IsAbstract)
    .Where(type => typeof(IHostedService).IsAssignableFrom(type))
    .Select(type => new { HostedService = type.Name })
;

services

#!markdown

## Predicates registration

Each batch may have a rule incapsulated in the function that returns contracts. Then we are scanning all types only one time. But if there are a lot of rules, we have the same number of checks for every type:

    PROBLEM: If many rules defined

#!csharp

// Rules are functions that depend on input type and return set of contracts. In this case for any type
// that implements IHostedService we return this type.
var rules = new List<Func<Type, IEnumerable<Type>>>() {
    type => !type.IsAbstract && typeof(IHostedService).IsAssignableFrom(type)
        ? Enumerable.Repeat(typeof(IHostedService), 1)
        : Enumerable.Empty<Type>()
};

var services = AllTypes.SelectMany(type => rules
        .SelectMany(rule => rule(type))
        .Select(contract => (type, contract))
    )
    .Select(tuple => new { HostedService = tuple.Item1.Name })
;

services

#!markdown

## Indexed types

We can create additional structures like indexes that will speedup requests. Instead of types scans we will have index seeks. As problems we can consider additional memory footprint and a balance between implementation complexity and comprehensive query language.

TODO: Class naming: ReflectionCache, TypesDb, TypeIndexer, TypeWalker.

#!csharp

public class TypesDb {
    private readonly Dictionary<Type, Type[]> _indexes;

    public TypesDb(Type[] types) {
        _indexes = AllTypes
            .Where(type => !type.IsAbstract)
            // For simplicity we take the "type" itself and all interfaces it implements (GetInterfaces())
            .SelectMany(type => 
                Enumerable.Repeat(type, 1)
                .Union(type.GetInterfaces())
                .Select(contract => (Type: type, Contract: contract))
            )
			// Then from grouping type->contracts we convert into contract->types
            .GroupBy(tuple => tuple.Contract)
			// And convert it to the dictionary (simple index implementation)
            .ToDictionary(
                group => group.Key,
                group => group.Select(item => item.Type).ToArray()
            )
        ;
    
    }

	// Getting list of implementations is straightworward, because already stored in this form.
    public Type[] Of<T>() => _indexes.TryGetValue(typeof(T), out var result) ? result : null;
}

var db = new TypesDb(AllTypes);
var services = db.Of<IHostedService>().Select(type => type.Name);

services

#!markdown

## TODO: Hybrid solution

Consumers are defining simple rules, for example interfaces they expect and then optionally more complex predicates. So we can say that are indexing predicates not types. Types walker is going through all types one time only and quickly seek for the applicable predicates. Compared to indexed types database we expect very small memory footprint.

#!csharp

// Rules are more simple. We imply that to be registered in IoC specific type should anyway implement
// the contract it gonna to be registered as. And only if it is, then we can make an additional check with
// the predicate.
// TODO: Potentially we can use abstract class and register run-time compiled implementations of such class.
var rules = new Dictionary<Type, Predicate<Type>>
{
    { typeof(IHostedService), type => true }
};

var services = AllTypes
    .Where(type => !type.IsAbstract)
    .SelectMany(type => 
        Enumerable.Repeat(type, 1)
        .Union(type.GetInterfaces())
        .Select(contract => (Type: type, Contract: contract))
    )
    .Where(tuple => rules.TryGetValue(tuple.Contract, out var predicate) && predicate(tuple.Type))
    .Select(tuple => tuple.Type.Name)
;

services

#!markdown

## TODO: Build-time registration

TODO: Is it viable to impelement build-time registrations? Sometimes we will have to import packages in the binary form.
